{
    "client.OnGameTick": {
        "prefix": "OnGameTick",
        "body": [
            "AddEvent(\"OnGameTick\", function(DeltaSeconds)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called on execution of the main thread. This is typically every frame (FPS) on clients. Tick rate on the server varies depending on the load. Use GetServerTickRate on the server to get that rate.\n"
    },
    "client.OnSteamOverlayActivated": {
        "prefix": "OnSteamOverlayActivated",
        "body": [
            "AddEvent(\"OnSteamOverlayActivated\", function(bActive)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "__EDIT_ME__\n"
    },
    "client.OnResolutionChange": {
        "prefix": "OnResolutionChange",
        "body": [
            "AddEvent(\"OnResolutionChange\", function(width, height)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when the size of the game window changes. Either due to manual resizing or through settings.\n"
    },
    "client.OnShowMainMenu": {
        "prefix": "OnShowMainMenu",
        "body": [
            "AddEvent(\"OnShowMainMenu\", function()\r\n\t$0\r\nend)\r\n"
        ],
        "description": "This function is called every time a player hides the main menu.\n"
    },
    "client.OnWhitelistAccepted": {
        "prefix": "OnWhitelistAccepted",
        "body": [
            "AddEvent(\"OnWhitelistAccepted\", function()\r\n\t$0\r\nend)\r\n"
        ],
        "description": "This function is called once the player has accepted the whitelist request.\n"
    },
    "client.OnVehicleStreamIn": {
        "prefix": "OnVehicleStreamIn",
        "body": [
            "AddEvent(\"OnVehicleStreamIn\", function(vehicle, player)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Calls when a vehicle streams out of the streaming distance set in your server_config for a player.\n"
    },
    "client.OnVehicleStreamOut": {
        "prefix": "OnVehicleStreamOut",
        "body": [
            "AddEvent(\"OnVehicleStreamOut\", function(vehicle, player)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a vehicle is no longer streamed for a player. The stream distance is set through your server_config.\n"
    },
    "client.OnPlayerStartEnterVehicle": {
        "prefix": "OnPlayerStartEnterVehicle",
        "body": [
            "AddEvent(\"OnPlayerStartEnterVehicle\", function()\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a player presses the key to start entering a vehicle. You can return false in this event to stop the player from entering.\n"
    },
    "client.OnPlayerStartExitVehicle": {
        "prefix": "OnPlayerStartExitVehicle",
        "body": [
            "AddEvent(\"OnPlayerStartExitVehicle\", function()\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a player presses the key to start exiting a vehicle. You can return false in this event to stop the player from exiting.\n"
    },
    "client.OnPlayerEnterVehicle": {
        "prefix": "OnPlayerEnterVehicle",
        "body": [
            "AddEvent(\"OnPlayerEnterVehicle\", function(player, vehicle, seat)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "This event is called when a player enters a vehicle.\n"
    },
    "client.OnPlayerLeaveVehicle": {
        "prefix": "OnPlayerLeaveVehicle",
        "body": [
            "AddEvent(\"OnPlayerLeaveVehicle\", function(player, vehicle, seat)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "__EDIT_ME__\n"
    },
    "client.OnPlayerToggleVehicleLight": {
        "prefix": "OnPlayerToggleVehicleLight",
        "body": [
            "AddEvent(\"OnPlayerToggleVehicleLight\", function()\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a (local) player presses the key to switch the vehicle light on/off.\n"
    },
    "client.OnPlayerToggleVehicleNitro": {
        "prefix": "OnPlayerToggleVehicleNitro",
        "body": [
            "AddEvent(\"OnPlayerToggleVehicleNitro\", function()\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a (local) player presses the key to turn nitro on/off. You can return false to prevent turning it on. Requires AttachVehicleNitro to be enabled on the vehicle.\n"
    },
    "client.OnPlayerToggleVehicleHorn": {
        "prefix": "OnPlayerToggleVehicleHorn",
        "body": [
            "AddEvent(\"OnPlayerToggleVehicleHorn\", function()\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a (local) player presses the key to turn the horn on/off. You can return false to prevent turning it on.\n"
    },
    "client.OnVehicleBackfire": {
        "prefix": "OnVehicleBackfire",
        "body": [
            "AddEvent(\"OnVehicleBackfire\", function()\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a backfire effect is triggered on a vehicle.\n"
    },
    "client.OnPlayWeaponHitEffects": {
        "prefix": "OnPlayWeaponHitEffects",
        "body": [
            "AddEvent(\"OnPlayWeaponHitEffects\", function(PlayerId, Weapon, HitType, HitId, StartLocation, HitLocation, HitLocationRelative, HitNormal, HitResult)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "This event handles visual effects of weapons. The Weapons.lua contains a pre-configured event that shows the same visual hit effects as always. It is called for local and remote players. If it is called for remote players the parameters will contain the synced values from the other client.\n"
    },
    "client.OnPlayerStreamIn": {
        "prefix": "OnPlayerStreamIn",
        "body": [
            "AddEvent(\"OnPlayerStreamIn\", function(player, otherplayer)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when another user is streamed in (rendered) for the player.\n"
    },
    "client.OnPlayerStreamOut": {
        "prefix": "OnPlayerStreamOut",
        "body": [
            "AddEvent(\"OnPlayerStreamOut\", function(player, otherplayer)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a player streams out of the streaming distance set by server_config for another player.\n"
    },
    "client.OnPlayerSwitchCamera": {
        "prefix": "OnPlayerSwitchCamera",
        "body": [
            "AddEvent(\"OnPlayerSwitchCamera\", function(bIsFirstPerson)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "__EDIT_ME__\n"
    },
    "client.OnPlayerDeath": {
        "prefix": "OnPlayerDeath",
        "body": [
            "AddEvent(\"OnPlayerDeath\", function(player, instigator)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Calls when a player dies by any means possible. If the player wasn't killed by another player, instigator will be the same as the player.\n"
    },
    "client.OnPlayerChatCommand": {
        "prefix": "OnPlayerChatCommand",
        "body": [
            "AddEvent(\"OnPlayerChatCommand\", function(player, command, exists)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a player executes a command in the chat. See AddCommand to handle specific commands. You can return false in this event to prevent the command from being passed to it's handler.\n"
    },
    "client.OnPlayerChat": {
        "prefix": "OnPlayerChat",
        "body": [
            "AddEvent(\"OnPlayerChat\", function(player, text)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "The event that gets called when you type a message in the chat.\n"
    },
    "client.OnPlayerSpawn": {
        "prefix": "OnPlayerSpawn",
        "body": [
            "AddEvent(\"OnPlayerSpawn\", function(playerid)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a player spawns. This usually happens after they died. Use SetPlayerRespawnTime to control how long it takes before they respawn.\n"
    },
    "client.OnPlayerTalking": {
        "prefix": "OnPlayerTalking",
        "body": [
            "AddEvent(\"OnPlayerTalking\", function()\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a player starts talking via VoIP.\n"
    },
    "client.OnPlayerToggleAim": {
        "prefix": "OnPlayerToggleAim",
        "body": [
            "AddEvent(\"OnPlayerToggleAim\", function()\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a (local) player presses the key to go in or out of the aim state. You can return false in this event to prevent the player from aiming.\n"
    },
    "client.OnPlayerFootstep": {
        "prefix": "OnPlayerFootstep",
        "body": [
            "AddEvent(\"OnPlayerFootstep\", function()\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a player hits the ground with their feet when walking/running.\n"
    },
    "client.OnPlayerWeaponShot": {
        "prefix": "OnPlayerWeaponShot",
        "body": [
            "AddEvent(\"OnPlayerWeaponShot\", function(player, weapon, hittype, hitid, hitX, hitY, hitZ, startX, startY, startZ, normalX, normalY, normalZ, BoneName)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a player has shot their weapon and the hit was authorized by the server but not yet processed its impact. You can call return false in this event to prevent this hit from further processing. (Server only)\n"
    },
    "client.OnKeyPress": {
        "prefix": "OnKeyPress",
        "body": [
            "AddEvent(\"OnKeyPress\", function(key)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when the player presses a key. You can use IsCtrlPressed and IsShiftPressed to check if it is a key combination.Use OnKeyRelease to detect when they release the key.\n"
    },
    "client.OnKeyRelease": {
        "prefix": "OnKeyRelease",
        "body": [
            "AddEvent(\"OnKeyRelease\", function(key)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when the player releases a key. Use OnKeyPress to detect key down events.\n"
    },
    "client.OnNPCStreamIn": {
        "prefix": "OnNPCStreamIn",
        "body": [
            "AddEvent(\"OnNPCStreamIn\", function(npc, player)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "The event thats called when a NPC is streamed for a player.\n"
    },
    "client.OnNPCStreamOut": {
        "prefix": "OnNPCStreamOut",
        "body": [
            "AddEvent(\"OnNPCStreamOut\", function(npc, player)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a NPC is streamed out from the server. \n"
    },
    "client.OnObjectStreamIn": {
        "prefix": "OnObjectStreamIn",
        "body": [
            "AddEvent(\"OnObjectStreamIn\", function(object)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when an object is streamed in from the server.\n"
    },
    "client.OnObjectStreamOut": {
        "prefix": "OnObjectStreamOut",
        "body": [
            "AddEvent(\"OnObjectStreamOut\", function(object)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when an object is streamed out from the server.\n"
    },
    "client.OnObjectHit": {
        "prefix": "OnObjectHit",
        "body": [
            "AddEvent(\"OnObjectHit\", function(object, hittype, hitid, hitX, hitY, hitZ, normalX, normalY, normalZ)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when something hits the object. Requires EnableObjectHitEvents to be called on the object before.\n"
    },
    "client.OnPlayerEndEditObject": {
        "prefix": "OnPlayerEndEditObject",
        "body": [
            "AddEvent(\"OnPlayerEndEditObject\", function(object)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "__EDIT_ME__\n"
    },
    "client.OnPlayerBeginEditObject": {
        "prefix": "OnPlayerBeginEditObject",
        "body": [
            "AddEvent(\"OnPlayerBeginEditObject\", function(object)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "__EDIT_ME__\n"
    },
    "client.OnObjectModelChange": {
        "prefix": "OnObjectModelChange",
        "body": [
            "AddEvent(\"OnObjectModelChange\", function(object, model)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when the model of an object is changed by SetObjectModel.\n"
    },
    "client.OnScriptError": {
        "prefix": "OnScriptError",
        "body": [
            "AddEvent(\"OnScriptError\", function()\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a script error occurs. On the client side, this is only called when the game was started with the -dev switch. Available on the sever side since version 1.0.3.\n"
    },
    "client.OnPickupStreamIn": {
        "prefix": "OnPickupStreamIn",
        "body": [
            "AddEvent(\"OnPickupStreamIn\", function(pickup)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "This function is called when a player streams in the pickup.\n"
    },
    "client.OnPickupStreamOut": {
        "prefix": "OnPickupStreamOut",
        "body": [
            "AddEvent(\"OnPickupStreamOut\", function(pickup)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "This function is called when a player streams out the pickup.\n"
    },
    "client.OnText3DStreamIn": {
        "prefix": "OnText3DStreamIn",
        "body": [
            "AddEvent(\"OnText3DStreamIn\", function(text3d)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "This event is called when a player streams in the text 3d label.\n"
    },
    "client.OnWebLoadComplete": {
        "prefix": "OnWebLoadComplete",
        "body": [
            "AddEvent(\"OnWebLoadComplete\", function(web)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a web browser created by CreateWebUI is ready to use.\n"
    },
    "client.OnSoundUpdateMeta": {
        "prefix": "OnSoundUpdateMeta",
        "body": [
            "AddEvent(\"OnSoundUpdateMeta\", function(sound, meta)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when new metadata was received from a network stream. (.pls playlist streams) This can be the name of the station, song, and artist.\n"
    },
    "client.OnSoundFinished": {
        "prefix": "OnSoundFinished",
        "body": [
            "AddEvent(\"OnSoundFinished\", function(sound)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a sound created by CreateSound or CreateSound3D stopped playing.\n"
    },
    "client.OnObjectNetworkUpdatePropertyValue": {
        "prefix": "OnObjectNetworkUpdatePropertyValue",
        "body": [
            "AddEvent(\"OnObjectNetworkUpdatePropertyValue\", function(object, PropertyName, PropertyValue)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a property value is updated from the network.\n"
    },
    "client.OnPlayerNetworkUpdatePropertyValue": {
        "prefix": "OnPlayerNetworkUpdatePropertyValue",
        "body": [
            "AddEvent(\"OnPlayerNetworkUpdatePropertyValue\", function(player, PropertyName, PropertyValue)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a property value is updated from the network.\n"
    },
    "client.OnVehicleNetworkUpdatePropertyValue": {
        "prefix": "OnVehicleNetworkUpdatePropertyValue",
        "body": [
            "AddEvent(\"OnVehicleNetworkUpdatePropertyValue\", function(vehicle, PropertyName, PropertyValue)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a property value is updated from the network.\n"
    },
    "client.OnNPCNetworkUpdatePropertyValue": {
        "prefix": "OnNPCNetworkUpdatePropertyValue",
        "body": [
            "AddEvent(\"OnNPCNetworkUpdatePropertyValue\", function(npc, PropertyName, PropertyValue)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a property value is updated from the network.\n"
    },
    "client.OnText3DNetworkUpdatePropertyValue": {
        "prefix": "OnText3DNetworkUpdatePropertyValue",
        "body": [
            "AddEvent(\"OnText3DNetworkUpdatePropertyValue\", function(textId, PropertyName, PropertyValue)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a property value is updated from the network.\n"
    },
    "client.OnPickupNetworkUpdatePropertyValue": {
        "prefix": "OnPickupNetworkUpdatePropertyValue",
        "body": [
            "AddEvent(\"OnPickupNetworkUpdatePropertyValue\", function(pickupId, PropertyName, PropertyValue)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a property value is updated from the network.\n"
    },
    "client.OnDoorNetworkUpdatePropertyValue": {
        "prefix": "OnDoorNetworkUpdatePropertyValue",
        "body": [
            "AddEvent(\"OnDoorNetworkUpdatePropertyValue\", function(door, PropertyName, PropertyValue)\r\n\t$0\r\nend)\r\n"
        ],
        "description": "Called when a property value is updated from the network.\n"
    }
}