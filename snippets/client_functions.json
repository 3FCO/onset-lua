{
    "client.DoesPakExist": {
        "prefix": "DoesPakExist",
        "body": [
            "DoesPakExist(${1:PakName})$0"
        ],
        "description": "Checks if a pak with the specified name exists.\n"
    },
    "client.LoadPak": {
        "prefix": "LoadPak",
        "body": [
            "LoadPak(${1:PakName}, ${2:RootPath (optional)}, ${3:ContentPath (optional)})$0"
        ],
        "description": "Loads a .pak file.\n"
    },
    "client.ReplaceObjectModelMesh": {
        "prefix": "ReplaceObjectModelMesh",
        "body": [
            "ReplaceObjectModelMesh(${1:ModelId}, ${2:PathToMesh})$0"
        ],
        "description": "Replaces a model on the known object model list. Will not replace already spawned objects. So call this before any object spawns.\n"
    },
    "client.ReplaceAnimationLibrarySequence": {
        "prefix": "ReplaceAnimationLibrarySequence",
        "body": [
            "ReplaceAnimationLibrarySequence(${1:AnimationId}, ${2:PathToNewAnimiation}, ${3:LoopCount (optional)}, ${4:bLayeredBlendSpine (optional)})$0"
        ],
        "description": "Replaces or adds a new animation sequence in the animation library. These affect the animations that can be set with SetPlayerAnimation\n"
    },
    "client.GetAllFilesInPak": {
        "prefix": "GetAllFilesInPak",
        "body": [
            "GetAllFilesInPak(${1:PakName})$0"
        ],
        "description": "Returns all files that are found inside a pak file.\n"
    },
    "client.SetStorageValue": {
        "prefix": "SetStorageValue",
        "body": [
            "SetStorageValue(${1:key}, ${2:value})$0"
        ],
        "description": "Can be used to save/read a variable/value on the client. Useful for some settings.\n"
    },
    "client.GetStorageValue": {
        "prefix": "GetStorageValue",
        "body": [
            "GetStorageValue(${1:key})$0"
        ],
        "description": "Can be used to save/read a variable/value on the client. Useful for some settings.\n"
    },
    "client.GetGameVersion": {
        "prefix": "GetGameVersion",
        "body": [
            "GetGameVersion()$0"
        ],
        "description": "Returns the server/ client's game version\n"
    },
    "client.GetGameVersionString": {
        "prefix": "GetGameVersionString",
        "body": [
            "GetGameVersionString()$0"
        ],
        "description": "Returns the server/ client's game version as a string.\n"
    },
    "client.IsGameDevMode": {
        "prefix": "IsGameDevMode",
        "body": [
            "IsGameDevMode()$0"
        ],
        "description": "Checks whether the game is in development mode. The development mode can be enabled by passing the -dev argument to the game executable.\n"
    },
    "client.IsPlayerInMainMenu": {
        "prefix": "IsPlayerInMainMenu",
        "body": [
            "IsPlayerInMainMenu()$0"
        ],
        "description": "Check if the client is in main menu. Can be used to make a pause system.\n"
    },
    "client.InvokeDamageFX": {
        "prefix": "InvokeDamageFX",
        "body": [
            "InvokeDamageFX(${1:value})$0"
        ],
        "description": "Invokes the visual damage effect for the client screen.\n"
    },
    "client.UpdateDiscordActivity": {
        "prefix": "UpdateDiscordActivity",
        "body": [
            "UpdateDiscordActivity(${1:activity})$0"
        ],
        "description": "Sets the discord activity. Requires \"discord_client_id\" to be set in the server config.\n"
    },
    "client.ConnectToServer": {
        "prefix": "ConnectToServer",
        "body": [
            "ConnectToServer(${1:Address}, ${2:Port}, ${3:Password (optional)}, ${4:LevelMap (optional)})$0"
        ],
        "description": "Connects the game to another server. The connection will happen on the next game tick.\n"
    },
    "client.SetNearClipPlane": {
        "prefix": "SetNearClipPlane",
        "body": [
            "SetNearClipPlane(${1:distance})$0"
        ],
        "description": "This function culls triangles in a certain distance. Useful for the first person mode to hide head attachments.\n"
    },
    "client.CreateSky": {
        "prefix": "CreateSky",
        "body": [
            "CreateSky()$0"
        ],
        "description": "Creates the default Onset sky system on a custom map. This only works on custom maps.\n"
    },
    "client.GetAllPackages": {
        "prefix": "GetAllPackages",
        "body": [
            "GetAllPackages()$0"
        ],
        "description": "Returns the name of packages in a table.\n"
    },
    "client.GetPackageFiles": {
        "prefix": "GetPackageFiles",
        "body": [
            "GetPackageFiles(${1:PackageName})$0"
        ],
        "description": "Returns all files that are registered with a specific package. See packages.\n"
    },
    "client.IsServer": {
        "prefix": "IsServer",
        "body": [
            "IsServer()$0"
        ],
        "description": "Used to check if a script currently runs on the server.\n"
    },
    "client.IsClient": {
        "prefix": "IsClient",
        "body": [
            "IsClient()$0"
        ],
        "description": "Used to check if a script currently runs on the client.\n"
    },
    "client.RGBA": {
        "prefix": "RGBA",
        "body": [
            "RGBA(${1:r}, ${2:g}, ${3:b}, ${4:a})$0"
        ],
        "description": "Converts RGBA to an integer. All values (including alpha) must be between 0 to 255. \n"
    },
    "client.RGB": {
        "prefix": "RGB",
        "body": [
            "RGB(${1:r}, ${2:g}, ${3:b }, ${4:a (optional)})$0"
        ],
        "description": "Converts RGB to an integer. All values (including alpha) must be between 0 to 255.\n"
    },
    "client.HexToRGBA": {
        "prefix": "HexToRGBA",
        "body": [
            "HexToRGBA(${1:HexColor})$0"
        ],
        "description": "Converts an integer color value to the RGB format.\n"
    },
    "client.LineTrace": {
        "prefix": "LineTrace",
        "body": [
            "LineTrace(${1:sX}, ${2:sY}, ${3:sZ}, ${4:eX}, ${5:eY}, ${6:eZ }, ${7:complex (optional)})$0"
        ],
        "description": "Trace a line through the specified coordinates and return the HitType entity type, identifier and the impact coordinates.\n"
    },
    "client.createtable ex": {
        "prefix": "createtable ex",
        "body": [
            "createtable ex(${1:metatable})$0"
        ],
        "description": "Creates a new table and sets the metatable.\n"
    },
    "client.GetCameraFoV": {
        "prefix": "GetCameraFoV",
        "body": [
            "GetCameraFoV()$0"
        ],
        "description": "Gets clients current FOV value\n"
    },
    "client.SetCameraFoV": {
        "prefix": "SetCameraFoV",
        "body": [
            "SetCameraFoV(${1:fov})$0"
        ],
        "description": "Set the client's field of view (FOV).\n"
    },
    "client.Random": {
        "prefix": "Random",
        "body": [
            "Random(${1:Min (optional)}, ${2:Max (optional)})$0"
        ],
        "description": "Get a pseudo-random number. Negative ranges are supported as of v1.0.2.\n"
    },
    "client.RandomFloat": {
        "prefix": "RandomFloat",
        "body": [
            "RandomFloat(${1:Min (optional)}, ${2:Max (optional)})$0"
        ],
        "description": "Get a pseudo-random float. Negative ranges are supported as of v1.0.2.\n"
    },
    "client.Base64Encode": {
        "prefix": "Base64Encode",
        "body": [
            "Base64Encode(${1:text})$0"
        ],
        "description": "Encodes the specified text in the Base64 format.\n"
    },
    "client.Base64Decode": {
        "prefix": "Base64Decode",
        "body": [
            "Base64Decode(${1:base64})$0"
        ],
        "description": "Decodes the Base64 into text.\n"
    },
    "client.GetDistance2D": {
        "prefix": "GetDistance2D",
        "body": [
            "GetDistance2D(${1:x}, ${2:y}, ${3:x2}, ${4:y2})$0"
        ],
        "description": "Calculates the distance between 2 points.\n"
    },
    "client.GetDistance3D": {
        "prefix": "GetDistance3D",
        "body": [
            "GetDistance3D(${1:x}, ${2:y}, ${3:z}, ${4:x2}, ${5:y2}, ${6:z2})$0"
        ],
        "description": "Gets the distance in centimeters between 3 dimensional points.\n"
    },
    "client.GetDistanceSquared3D": {
        "prefix": "GetDistanceSquared3D",
        "body": [
            "GetDistanceSquared3D(${1:x}, ${2:y}, ${3:z}, ${4:x2}, ${5:y2}, ${6:z2})$0"
        ],
        "description": "Get the distance between points squared in relation to the three dimensions.\n"
    },
    "client.Lerp": {
        "prefix": "Lerp",
        "body": [
            "Lerp(${1:t}, ${2:a}, ${3:b})$0"
        ],
        "description": "Interpolates between a and b with the parameter t. \n"
    },
    "client.LerpVector": {
        "prefix": "LerpVector",
        "body": [
            "LerpVector(${1:t}, ${2:aX}, ${3:aY}, ${4:aZ}, ${5:bX}, ${6:bY}, ${7:bZ})$0"
        ],
        "description": "Interpolates between vector A and vector B with the parameter t. \n"
    },
    "client.VectorToRotation": {
        "prefix": "VectorToRotation",
        "body": [
            "VectorToRotation(${1:x}, ${2:y}, ${3:z})$0"
        ],
        "description": "Converts the XYZ vectors into rotation.\n"
    },
    "client.RotationToVector": {
        "prefix": "RotationToVector",
        "body": [
            "RotationToVector(${1:x}, ${2:y}, ${3:z})$0"
        ],
        "description": "Converts the given rotation into XYZ vectors.\n"
    },
    "client.NormalizeVector": {
        "prefix": "NormalizeVector",
        "body": [
            "NormalizeVector(${1:x}, ${2:y}, ${3:z})$0"
        ],
        "description": "Normalizes a vector. \n"
    },
    "client.IsFloatNearlyZero": {
        "prefix": "IsFloatNearlyZero",
        "body": [
            "IsFloatNearlyZero(${1:Value})$0"
        ],
        "description": "Checks if a float value is nearly zero.\n"
    },
    "client.RandomUnitVectorInCone": {
        "prefix": "RandomUnitVectorInCone",
        "body": [
            "RandomUnitVectorInCone(${1:x}, ${2:y}, ${3:z}, ${4:HalfAngle})$0"
        ],
        "description": "Returns a normalized vector (length 1) that is inside the specified cone.\n"
    },
    "client.RandomUnitVectorInEllipticalCone": {
        "prefix": "RandomUnitVectorInEllipticalCone",
        "body": [
            "RandomUnitVectorInEllipticalCone(${1:x}, ${2:y}, ${3:z}, ${4:MaxYaw}, ${5:MaxPitch})$0"
        ],
        "description": "Returns a normalized vector (length 1) that is inside the specified cone.\n"
    },
    "client.UpdateStreamingLevels": {
        "prefix": "UpdateStreamingLevels",
        "body": [
            "UpdateStreamingLevels()$0"
        ],
        "description": "Tells the engine to look if the level streaming needs an update. The engine does this automatically but in some circumstances you might want to explicitly tell the engine to update. For instance after teleporting a player far away on the map you can call this function with a little delay of 50ms after the teleport. Sometimes it's necessary to call it multiple times.\n"
    },
    "client.GetTickCount": {
        "prefix": "GetTickCount",
        "body": [
            "GetTickCount()$0"
        ],
        "description": "Returns the uptime of the actual computer (not the Onset application) in milliseconds.\n"
    },
    "client.GetTimeSeconds": {
        "prefix": "GetTimeSeconds",
        "body": [
            "GetTimeSeconds()$0"
        ],
        "description": "Returns the amount of time since the server started up.\n"
    },
    "client.GetDeltaSeconds": {
        "prefix": "GetDeltaSeconds",
        "body": [
            "GetDeltaSeconds()$0"
        ],
        "description": "Gets the time between game ticks/frames.\n"
    },
    "client.TogglePlayerTag": {
        "prefix": "TogglePlayerTag",
        "body": [
            "TogglePlayerTag(${1:player}, ${2:tagname}, ${3:toggle})$0"
        ],
        "description": "Enables or disables a tag above a players head.\n"
    },
    "client.SetPlayerVoiceTone": {
        "prefix": "SetPlayerVoiceTone",
        "body": [
            "SetPlayerVoiceTone(${1:playerId}, ${2:VoiceTone})$0"
        ],
        "description": "Switches the player voice tone.\n"
    },
    "client.GetPlayerActor": {
        "prefix": "GetPlayerActor",
        "body": [
            "GetPlayerActor(${1:playerid})$0"
        ],
        "description": "Get the Unreal Engine actor for the player. Can then be used with UnrealLua.\n"
    },
    "client.GetPlayerSkeletalMeshComponent": {
        "prefix": "GetPlayerSkeletalMeshComponent",
        "body": [
            "GetPlayerSkeletalMeshComponent(${1:player}, ${2:ComponentName})$0"
        ],
        "description": "Gets the skeletal mesh component of a player.\n"
    },
    "client.GetPlayerId": {
        "prefix": "GetPlayerId",
        "body": [
            "GetPlayerId()$0"
        ],
        "description": "Return id of the player.\n"
    },
    "client.SetPlayerPropertyValue": {
        "prefix": "SetPlayerPropertyValue",
        "body": [
            "SetPlayerPropertyValue()$0"
        ],
        "description": "Sets a property value for this entity. Useful to store information for individual entities which can be accessed on client and server and across different packages.\n"
    },
    "client.GetPlayerPropertyValue": {
        "prefix": "GetPlayerPropertyValue",
        "body": [
            "GetPlayerPropertyValue()$0"
        ],
        "description": "Gets a property value for this entity.\n"
    },
    "client.SetPlayerRotationRate": {
        "prefix": "SetPlayerRotationRate",
        "body": [
            "SetPlayerRotationRate(${1:RotationRate})$0"
        ],
        "description": "Sets the speed of the players rotation.\n"
    },
    "client.GetPlayerRotationRate": {
        "prefix": "GetPlayerRotationRate",
        "body": [
            "GetPlayerRotationRate()$0"
        ],
        "description": "__EDIT_ME__\n"
    },
    "client.SetPlayerJumpZVelocity": {
        "prefix": "SetPlayerJumpZVelocity",
        "body": [
            "SetPlayerJumpZVelocity(${1:JumpZVelocity})$0"
        ],
        "description": "Sets the jump Z velocity. How high/fast a player can jump.\n"
    },
    "client.GetPlayerJumpZVelocity": {
        "prefix": "GetPlayerJumpZVelocity",
        "body": [
            "GetPlayerJumpZVelocity()$0"
        ],
        "description": "Get the jump Z velocity. Use SetPlayerJumpZVelocity to set it.\n"
    },
    "client.GetPlayerWeapon": {
        "prefix": "GetPlayerWeapon",
        "body": [
            "GetPlayerWeapon(${1:player}, ${2:weaponslot (optional)})$0"
        ],
        "description": "Returns the specified player's weapon id, ammo, ammo in magazine in the specified weapon slot.\n"
    },
    "client.GetWeaponType": {
        "prefix": "GetWeaponType",
        "body": [
            "GetWeaponType(${1:WeaponModelId})$0"
        ],
        "description": "Gets the type of a specific weapon model. You can get the weapon model from GetPlayerWeapon.\n"
    },
    "client.GetPlayerWeaponMuzzleLocation": {
        "prefix": "GetPlayerWeaponMuzzleLocation",
        "body": [
            "GetPlayerWeaponMuzzleLocation(${1:player (optional)})$0"
        ],
        "description": "Gets the muzzle location of a weapon that a specific player is holding in world space.\n"
    },
    "client.GetPlayerBoneNames": {
        "prefix": "GetPlayerBoneNames",
        "body": [
            "GetPlayerBoneNames()$0"
        ],
        "description": "Returns a table containing the bone names of the player skeleton dynamically. Useful for GetPlayerBoneLocation.\n"
    },
    "client.GetAllPlayersInSphere": {
        "prefix": "GetAllPlayersInSphere",
        "body": [
            "GetAllPlayersInSphere(${1:x}, ${2:y}, ${3:z}, ${4:radius }, ${5:bIncludeSelf (optional)})$0"
        ],
        "description": "__EDIT_ME__\n"
    },
    "client.GetAllPlayersInBox": {
        "prefix": "GetAllPlayersInBox",
        "body": [
            "GetAllPlayersInBox(${1:x}, ${2:y}, ${3:z}, ${4:bx}, ${5:by}, ${6:bz}, ${7:bIncludeSelf (optional)})$0"
        ],
        "description": "Gets a table of players that are inside a specific box area.\n"
    },
    "client.GetTerrainHeight": {
        "prefix": "GetTerrainHeight",
        "body": [
            "GetTerrainHeight(${1:sX}, ${2:sY}, ${3:sZ})$0"
        ],
        "description": "Creates a linetrace from the given coordiantes facing downwards and returns the Z value of the first hit object.\n"
    },
    "client.EnableFirstPersonCamera": {
        "prefix": "EnableFirstPersonCamera",
        "body": [
            "EnableFirstPersonCamera(${1:bEnable})$0"
        ],
        "description": "Switches the player camera between 1st and 3rd person.\n"
    },
    "client.IsFirstPersonCamera": {
        "prefix": "IsFirstPersonCamera",
        "body": [
            "IsFirstPersonCamera()$0"
        ],
        "description": "Check if the first person camera is enabled from EnableFirstPersonCamera.\n"
    },
    "client.SetControllerOrientedMovement": {
        "prefix": "SetControllerOrientedMovement",
        "body": [
            "SetControllerOrientedMovement(${1:bEnable})$0"
        ],
        "description": "Makes the player mesh to control like in first person. Meaning when you press 'S' the character won't turn backwards but rather just walk backwards.\n"
    },
    "client.IsValidPlayer": {
        "prefix": "IsValidPlayer",
        "body": [
            "IsValidPlayer(${1:player})$0"
        ],
        "description": "Checks whether the specified player is connected to the server or not.\n"
    },
    "client.GetPlayerName": {
        "prefix": "GetPlayerName",
        "body": [
            "GetPlayerName(${1:player})$0"
        ],
        "description": "Get a players Steam nickname/username.\n"
    },
    "client.GetStreamedPlayers": {
        "prefix": "GetStreamedPlayers",
        "body": [
            "GetStreamedPlayers()$0"
        ],
        "description": "Returns a table of player identifiers streamed in for the client.\n"
    },
    "client.GetPlayerLocation": {
        "prefix": "GetPlayerLocation",
        "body": [
            "GetPlayerLocation(${1:player})$0"
        ],
        "description": "Get the specified client's location.\n"
    },
    "client.GetPlayerHeading": {
        "prefix": "GetPlayerHeading",
        "body": [
            "GetPlayerHeading(${1:player})$0"
        ],
        "description": "Get the specified player's heading (rotation).\n"
    },
    "client.IsPlayerTalking": {
        "prefix": "IsPlayerTalking",
        "body": [
            "IsPlayerTalking(${1:player})$0"
        ],
        "description": "Check if a player is talking or not.\n"
    },
    "client.GetPlayerHealth": {
        "prefix": "GetPlayerHealth",
        "body": [
            "GetPlayerHealth(${1:player})$0"
        ],
        "description": "Get the specified player's health.\n"
    },
    "client.GetPlayerArmor": {
        "prefix": "GetPlayerArmor",
        "body": [
            "GetPlayerArmor(${1:player})$0"
        ],
        "description": "Get the armor health of the specified player.\n"
    },
    "client.GetPlayerMovementMode": {
        "prefix": "GetPlayerMovementMode",
        "body": [
            "GetPlayerMovementMode(${1:player})$0"
        ],
        "description": "Returns the players movement mode\n"
    },
    "client.GetPlayerMovementSpeed": {
        "prefix": "GetPlayerMovementSpeed",
        "body": [
            "GetPlayerMovementSpeed(${1:player})$0"
        ],
        "description": "Get the player's movement speed.\n"
    },
    "client.IsPlayerAiming": {
        "prefix": "IsPlayerAiming",
        "body": [
            "IsPlayerAiming(${1:player})$0"
        ],
        "description": "Check if a player is aiming or not.\n"
    },
    "client.IsPlayerReloading": {
        "prefix": "IsPlayerReloading",
        "body": [
            "IsPlayerReloading(${1:player})$0"
        ],
        "description": "Check if a player is reloading a gun or not.\n"
    },
    "client.IsPlayerDead": {
        "prefix": "IsPlayerDead",
        "body": [
            "IsPlayerDead(${1:player})$0"
        ],
        "description": "Check if a player is dead.\n"
    },
    "client.GetPlayerBoneLocation": {
        "prefix": "GetPlayerBoneLocation",
        "body": [
            "GetPlayerBoneLocation(${1:player}, ${2:BoneName }, ${3:World Space, 2 = Local Space (optional)})$0"
        ],
        "description": "This function returns the bone location of the player.\n"
    },
    "client.SetPlayerOutline": {
        "prefix": "SetPlayerOutline",
        "body": [
            "SetPlayerOutline(${1:player}, ${2:bEnable (optional)})$0"
        ],
        "description": "Creates an outline around the player mesh.\n"
    },
    "client.SetPlayerClothingPreset": {
        "prefix": "SetPlayerClothingPreset",
        "body": [
            "SetPlayerClothingPreset(${1:player}, ${2:clothing_preset})$0"
        ],
        "description": "This function sets a predefined clothing preset on a player. This is for people who are not interested in setting each clothing item ClothingExample.\n"
    },
    "client.GetPlayerVehicle": {
        "prefix": "GetPlayerVehicle",
        "body": [
            "GetPlayerVehicle(${1:player})$0"
        ],
        "description": "Returns the vehicle identifier the player is in.\n"
    },
    "client.IsPlayerInVehicle": {
        "prefix": "IsPlayerInVehicle",
        "body": [
            "IsPlayerInVehicle(${1:player (optional)})$0"
        ],
        "description": "Check if player is in vehicle or not.\n"
    },
    "client.GetPlayerVehicleSeat": {
        "prefix": "GetPlayerVehicleSeat",
        "body": [
            "GetPlayerVehicleSeat(${1:player})$0"
        ],
        "description": "Gets the vehicle seat a player is.\n"
    },
    "client.GetPlayerEquippedWeaponSlot": {
        "prefix": "GetPlayerEquippedWeaponSlot",
        "body": [
            "GetPlayerEquippedWeaponSlot(${1:player})$0"
        ],
        "description": "Returns the slot the player currently has equiped\n"
    },
    "client.GetPlayerForwardVector": {
        "prefix": "GetPlayerForwardVector",
        "body": [
            "GetPlayerForwardVector(${1:player})$0"
        ],
        "description": "Gets the normalized forward vector.\n"
    },
    "client.GetPlayerRightVector": {
        "prefix": "GetPlayerRightVector",
        "body": [
            "GetPlayerRightVector(${1:player})$0"
        ],
        "description": "Gets the normalized right vector.\n"
    },
    "client.GetPlayerUpVector": {
        "prefix": "GetPlayerUpVector",
        "body": [
            "GetPlayerUpVector(${1:player})$0"
        ],
        "description": "Gets the normalized up vector.\n"
    },
    "client.GetVehicleActor": {
        "prefix": "GetVehicleActor",
        "body": [
            "GetVehicleActor(${1:vehicleid})$0"
        ],
        "description": "Get the Unreal Engine actor for the Vehicle.\n"
    },
    "client.SetPlayerLipMovement": {
        "prefix": "SetPlayerLipMovement",
        "body": [
            "SetPlayerLipMovement(${1:player})$0"
        ],
        "description": "Makes the lips of a player look like they are talking for a second. To be used in OnPlayerTalking.\n"
    },
    "client.IsPlayerPlayingAnimation": {
        "prefix": "IsPlayerPlayingAnimation",
        "body": [
            "IsPlayerPlayingAnimation(${1:player})$0"
        ],
        "description": "Detect if the player current plays an animation from SetPlayerAnimation.\n"
    },
    "client.GetPlayerCount": {
        "prefix": "GetPlayerCount",
        "body": [
            "GetPlayerCount()$0"
        ],
        "description": "Gets the count of the online players. On the client it only returns the number of streamed in players.\n"
    },
    "client.CancelAimImmediately": {
        "prefix": "CancelAimImmediately",
        "body": [
            "CancelAimImmediately()$0"
        ],
        "description": "Cancel the aim state when a player is aiming with a gun. To prevent a player from aiming you can use OnPlayerToggleAim.\n"
    },
    "client.StartCameraFade": {
        "prefix": "StartCameraFade",
        "body": [
            "StartCameraFade(${1:FromAlpha}, ${2:ToAlpha}, ${3:Duration}, ${4:IntColor (optional)})$0"
        ],
        "description": "Smoothly fade in or out, setting CameraFade will overwrite any other started camera fades which were called before. The fading will no persist after the fade duration.\n"
    },
    "client.StopCameraFade": {
        "prefix": "StopCameraFade",
        "body": [
            "StopCameraFade()$0"
        ],
        "description": "Stops the camera fade effect.\n"
    },
    "client.PlayCameraShake": {
        "prefix": "PlayCameraShake",
        "body": [
            "PlayCameraShake(${1:Duration }, ${2:BlendInTime}, ${3:BlendOutTime}, ${4:Scale (optional)})$0"
        ],
        "description": "Make the player's camera shake using StopCameraShake.\n"
    },
    "client.StopCameraShake": {
        "prefix": "StopCameraShake",
        "body": [
            "StopCameraShake(${1:bImmediate (optional)})$0"
        ],
        "description": "Stop the camera shake of the client.\n"
    },
    "client.SetCameraShakeLocation": {
        "prefix": "SetCameraShakeLocation",
        "body": [
            "SetCameraShakeLocation(${1:XAmp}, ${2:XFreq}, ${3:YAmp}, ${4:YFreq}, ${5:ZAmp}, ${6:ZFreq})$0"
        ],
        "description": "__EDIT_ME__\n"
    },
    "client.SetCameraShakeRotation": {
        "prefix": "SetCameraShakeRotation",
        "body": [
            "SetCameraShakeRotation(${1:PitchAmp}, ${2:PitchFreq}, ${3:YawAmp}, ${4:YawFreq}, ${5:RollAmp}, ${6:RollFreq})$0"
        ],
        "description": "Set the camera shake rotation properties.\n"
    },
    "client.SetCameraShakeFOV": {
        "prefix": "SetCameraShakeFOV",
        "body": [
            "SetCameraShakeFOV(${1:FOVAmp}, ${2:FOVFreq})$0"
        ],
        "description": "Set the camera shake's field of view.\n"
    },
    "client.GetScreenSize": {
        "prefix": "GetScreenSize",
        "body": [
            "GetScreenSize()$0"
        ],
        "description": "Get the client's screen size\n"
    },
    "client.SetCameraLocation": {
        "prefix": "SetCameraLocation",
        "body": [
            "SetCameraLocation(${1:x}, ${2:y}, ${3:z}, ${4:bWorldSpace (optional)})$0"
        ],
        "description": "Set the camera location.\n"
    },
    "client.GetCameraLocation": {
        "prefix": "GetCameraLocation",
        "body": [
            "GetCameraLocation(${1:bSpectateCamera (optional)})$0"
        ],
        "description": "__EDIT_ME__\n"
    },
    "client.SetCameraRotation": {
        "prefix": "SetCameraRotation",
        "body": [
            "SetCameraRotation(${1:pitch}, ${2:yaw}, ${3:roll }, ${4:bWorldSpace (optional)})$0"
        ],
        "description": "__EDIT_ME__\n"
    },
    "client.GetCameraRotation": {
        "prefix": "GetCameraRotation",
        "body": [
            "GetCameraRotation(${1:bSpectateCamera (optional)})$0"
        ],
        "description": "Get the camera rotation\n"
    },
    "client.GetCameraForwardVector": {
        "prefix": "GetCameraForwardVector",
        "body": [
            "GetCameraForwardVector()$0"
        ],
        "description": "__EDIT_ME__\n"
    },
    "client.GetCameraRightVector": {
        "prefix": "GetCameraRightVector",
        "body": [
            "GetCameraRightVector()$0"
        ],
        "description": "__EDIT_ME__\n"
    },
    "client.GetCameraUpVector": {
        "prefix": "GetCameraUpVector",
        "body": [
            "GetCameraUpVector()$0"
        ],
        "description": "__EDIT_ME__\n"
    },
    "client.SetCameraViewDistance": {
        "prefix": "SetCameraViewDistance",
        "body": [
            "SetCameraViewDistance(${1:distance})$0"
        ],
        "description": "Sets the player's camera view distance. The default camera view distance for players on-foot is 350.0 units.\n"
    },
    "client.GetCameraViewDistance": {
        "prefix": "GetCameraViewDistance",
        "body": [
            "GetCameraViewDistance()$0"
        ],
        "description": "Gets the player's camera view distance.\n"
    },
    "client.CreateWaypoint": {
        "prefix": "CreateWaypoint",
        "body": [
            "CreateWaypoint(${1:x}, ${2:y}, ${3:z}, ${4:text})$0"
        ],
        "description": "Creates a waypoint in the world. Distance is calculated automatically and shown to the player.\n"
    },
    "client.DestroyWaypoint": {
        "prefix": "DestroyWaypoint",
        "body": [
            "DestroyWaypoint(${1:waypointId})$0"
        ],
        "description": "Destroys an already created waypoint.\n"
    },
    "client.SetWaypointText": {
        "prefix": "SetWaypointText",
        "body": [
            "SetWaypointText(${1:waypointId}, ${2:text})$0"
        ],
        "description": "Updates the specified waypoint Id text.\n"
    },
    "client.SetWaypointLocation": {
        "prefix": "SetWaypointLocation",
        "body": [
            "SetWaypointLocation(${1:waypointId}, ${2:x}, ${3:y}, ${4:z})$0"
        ],
        "description": "Sets the specified waypoint location.\n"
    },
    "client.GetWaypointLocation": {
        "prefix": "GetWaypointLocation",
        "body": [
            "GetWaypointLocation()$0"
        ],
        "description": "Gets the specified waypoint location.\n"
    },
    "client.GetAllWaypoints": {
        "prefix": "GetAllWaypoints",
        "body": [
            "GetAllWaypoints()$0"
        ],
        "description": "Gets all the waypoint IDs in a table.\n"
    },
    "client.CreateFireworks": {
        "prefix": "CreateFireworks",
        "body": [
            "CreateFireworks(${1:modelid}, ${2:x}, ${3:y}, ${4:z}, ${5:rx}, ${6:ry}, ${7:rz})$0"
        ],
        "description": "Creates fireworks that shoot upwards and explode. ModelId presets contain various shapes/styles of fireworks.\n"
    },
    "client.GetPackageName": {
        "prefix": "GetPackageName",
        "body": [
            "GetPackageName()$0"
        ],
        "description": "Get name of the package from where this function is called from.\n"
    },
    "client.ImportPackage": {
        "prefix": "ImportPackage",
        "body": [
            "ImportPackage(${1:PackageName})$0"
        ],
        "description": "Creates a table holding all exported functions by another package.\n"
    },
    "client.AddFunctionExport": {
        "prefix": "AddFunctionExport",
        "body": [
            "AddFunctionExport(${1:ExportName}, ${2:ExportFunction})$0"
        ],
        "description": "Exports a function that can later be imported from another package.\n"
    },
    "client.AddPlayerChat": {
        "prefix": "AddPlayerChat",
        "body": [
            "AddPlayerChat(${1:player}, ${2:message})$0"
        ],
        "description": "Adds (or sends) the specified player or client a message.\n"
    },
    "client.IsChatFocus": {
        "prefix": "IsChatFocus",
        "body": [
            "IsChatFocus()$0"
        ],
        "description": "Check if the chat is in focus for the client.\n"
    },
    "client.ShowChat": {
        "prefix": "ShowChat",
        "body": [
            "ShowChat(${1:show})$0"
        ],
        "description": "To toggle the chat for the client.\n"
    },
    "client.SetChatLocation": {
        "prefix": "SetChatLocation",
        "body": [
            "SetChatLocation(${1:x}, ${2:y})$0"
        ],
        "description": "Set the client's chat location position.\n"
    },
    "client.GetChatLocation": {
        "prefix": "GetChatLocation",
        "body": [
            "GetChatLocation()$0"
        ],
        "description": "Get the player's chat screen location.\n"
    },
    "client.ShowWeaponHUD": {
        "prefix": "ShowWeaponHUD",
        "body": [
            "ShowWeaponHUD(${1:bShow})$0"
        ],
        "description": "Toggle the weapon HUD.\n"
    },
    "client.ShowHealthHUD": {
        "prefix": "ShowHealthHUD",
        "body": [
            "ShowHealthHUD(${1:show})$0"
        ],
        "description": "Toggle the health HUD for the client.\n"
    },
    "client.NotifyCrosshairHit": {
        "prefix": "NotifyCrosshairHit",
        "body": [
            "NotifyCrosshairHit()$0"
        ],
        "description": "Tells the system that the crosshair should be shown/played, for example when hitting an enemy.\n"
    },
    "client.SetPostEffect": {
        "prefix": "SetPostEffect",
        "body": [
            "SetPostEffect(${1:CategoryName}, ${2:SettingName}, ${3:Value})$0"
        ],
        "description": "Sets post processing effects (SetPostProcessData).\n"
    },
    "client.AddPostProcessMaterial": {
        "prefix": "AddPostProcessMaterial",
        "body": [
            "AddPostProcessMaterial(${1:SlotName}, ${2:UMaterialInterface})$0"
        ],
        "description": "Adds a post process material to the global post process volume. The material itself must be loaded with in a pak file.\n"
    },
    "client.RemovePostProcessMaterial": {
        "prefix": "RemovePostProcessMaterial",
        "body": [
            "RemovePostProcessMaterial(${1:SlotName})$0"
        ],
        "description": "Removes a post process material that was previously added with AddPostProcessMaterial\n"
    },
    "client.DrawText": {
        "prefix": "DrawText",
        "body": [
            "DrawText(${1:x}, ${2:y}, ${3:text})$0"
        ],
        "description": "Draws a text on the player screen.  The X and Y axis are the screen coordinates which start from upper-left corner instead of center.\n"
    },
    "client.SetDrawColor": {
        "prefix": "SetDrawColor",
        "body": [
            "SetDrawColor(${1:IntColor})$0"
        ],
        "description": "Sets the color that will be used by all Draw* functions.\n"
    },
    "client.SetTextDrawScale": {
        "prefix": "SetTextDrawScale",
        "body": [
            "SetTextDrawScale(${1:sx}, ${2:sy})$0"
        ],
        "description": "Sets the draw scale for the DrawText function.\n"
    },
    "client.GetTextSize": {
        "prefix": "GetTextSize",
        "body": [
            "GetTextSize(${1:text}, ${2:Scale (optional)})$0"
        ],
        "description": "Gets the size (width and height) of a text.\n"
    },
    "client.DrawLine": {
        "prefix": "DrawLine",
        "body": [
            "DrawLine(${1:sX}, ${2:sY}, ${3:eX}, ${4:eY}, ${5:thickness (optional)})$0"
        ],
        "description": "Draws a line in screen space.\n"
    },
    "client.DrawLine3D": {
        "prefix": "DrawLine3D",
        "body": [
            "DrawLine3D(${1:sX}, ${2:sY}, ${3:sZ}, ${4:eX}, ${5:eY}, ${6:eZ}, ${7:thickness (optional)}, ${8:bForeground (optional)})$0"
        ],
        "description": "Draws a line in 3d space.\n"
    },
    "client.DrawPoint3D": {
        "prefix": "DrawPoint3D",
        "body": [
            "DrawPoint3D(${1:x}, ${2:y}, ${3:z}, ${4:PointSize (optional)}, ${5:bForeground (optional)})$0"
        ],
        "description": "Draws a point in 3d space.\n"
    },
    "client.DrawCircle3D": {
        "prefix": "DrawCircle3D",
        "body": [
            "DrawCircle3D(${1:x}, ${2:y}, ${3:z}, ${4:XAxisX}, ${5:XAxisY}, ${6:XAxisZ}, ${7:YAxisX}, ${8:YAxisY}, ${9:YAxisZ}, ${10:Radius (optional)}, ${11:bForeground (optional)})$0"
        ],
        "description": "Draws a circle in 3d space.\n"
    },
    "client.DrawBox": {
        "prefix": "DrawBox",
        "body": [
            "DrawBox(${1:sX}, ${2:sY}, ${3:sW}, ${4:sH}, ${5:thickness (optional)})$0"
        ],
        "description": "Draws a box in screen space.\n"
    },
    "client.DrawRect": {
        "prefix": "DrawRect",
        "body": [
            "DrawRect(${1:sX}, ${2:sY}, ${3:sW}, ${4:sH})$0"
        ],
        "description": "Draw rectangle in screen space.\n"
    },
    "client.DrawTexture": {
        "prefix": "DrawTexture",
        "body": [
            "DrawTexture(${1:TextureReference}, ${2:ScreenX}, ${3:ScreenY}, ${4:Scale}, ${5:bScalePosition})$0"
        ],
        "description": "Draws an UTexture on screen. https://docs.unrealengine.com/en-US/API/Runtime/Engine/GameFramework/AHUD/DrawTextureSimple/index.html\n"
    },
    "client.DrawTextureEx": {
        "prefix": "DrawTextureEx",
        "body": [
            "DrawTextureEx(${1:TextureReference}, ${2:ScreenX}, ${3:ScreenY}, ${4:ScreenW}, ${5:ScreenH}, ${6:TextureU}, ${7:TextureV}, ${8:TextureUWidth}, ${9:TextureVHeight}, ${10:TintColor}, ${11:BlendMode}, ${12:Scale}, ${13:bScalePosition}, ${14:Rotation}, ${15:RotPivot})$0"
        ],
        "description": "Draws an UTexture on screen. https://docs.unrealengine.com/en-US/API/Runtime/Engine/GameFramework/AHUD/DrawTexture/index.html\n"
    },
    "client.WorldToScreen": {
        "prefix": "WorldToScreen",
        "body": [
            "WorldToScreen(${1:x}, ${2:y}, ${3:z})$0"
        ],
        "description": "Projects a 3d world location into 2d screen space location. Also returns a bool indicating whether the 3d location is actually on the screen.\n"
    },
    "client.ScreenToWorld": {
        "prefix": "ScreenToWorld",
        "body": [
            "ScreenToWorld(${1:x}, ${2:y})$0"
        ],
        "description": "Deprojects a 2D screen space into 3D world space.\n"
    },
    "client.CreateTextBox": {
        "prefix": "CreateTextBox",
        "body": [
            "CreateTextBox(${1:x}, ${2:y}, ${3:text}, ${4:justification})$0"
        ],
        "description": "Creates a text box on the player's screen.\n"
    },
    "client.DestroyTextBox": {
        "prefix": "DestroyTextBox",
        "body": [
            "DestroyTextBox(${1:textid})$0"
        ],
        "description": "Destroy a text box created with CreateTextBox.\n"
    },
    "client.SetTextBoxAnchors": {
        "prefix": "SetTextBoxAnchors",
        "body": [
            "SetTextBoxAnchors(${1:textid}, ${2:MinX}, ${3:MinY}, ${4:MaxX}, ${5:MaxY})$0"
        ],
        "description": "__EDIT_ME__\n"
    },
    "client.SetTextBoxAlignment": {
        "prefix": "SetTextBoxAlignment",
        "body": [
            "SetTextBoxAlignment(${1:textid}, ${2:x}, ${3:y})$0"
        ],
        "description": "Sets the textbox alignment\n"
    },
    "client.SetTextBoxText": {
        "prefix": "SetTextBoxText",
        "body": [
            "SetTextBoxText(${1:textid}, ${2:text})$0"
        ],
        "description": "Set the string of the specified text box.\n"
    },
    "client.SetOceanWaterLevel": {
        "prefix": "SetOceanWaterLevel",
        "body": [
            "SetOceanWaterLevel(${1:Level}, ${2:bIncludeSwimmingVolume (optional)})$0"
        ],
        "description": "Sets the ocean water level to a specific height.\n"
    },
    "client.SetOceanColor": {
        "prefix": "SetOceanColor",
        "body": [
            "SetOceanColor(${1:WaveScatteringColor}, ${2:WaveScatteringFade}, ${3:ScatteringColor}, ${4:WetColor}, ${5:FogColor})$0"
        ],
        "description": "Sets the upper ocean water color, variables are integers. Use RGBA to conversion.\n"
    },
    "client.ResetOceanColor": {
        "prefix": "ResetOceanColor",
        "body": [
            "ResetOceanColor()$0"
        ],
        "description": "Resets the original ocean color.\n"
    },
    "client.ShowMouseCursor": {
        "prefix": "ShowMouseCursor",
        "body": [
            "ShowMouseCursor(${1:bShow})$0"
        ],
        "description": "Toggle the mouse cursor for the client.\n"
    },
    "client.GetMouseHitLocation": {
        "prefix": "GetMouseHitLocation",
        "body": [
            "GetMouseHitLocation()$0"
        ],
        "description": "Gets the X, Y, Z world location below the mouse cursor. This basically traces from the position of the mouse cursor to the next colliding geometry in world space.\n"
    },
    "client.GetMouseHitEntity": {
        "prefix": "GetMouseHitEntity",
        "body": [
            "GetMouseHitEntity()$0"
        ],
        "description": "Get entity type and identifier the mouse pointer hits. This basically traces from the position of the mouse cursor to the next colliding geometry in world space. \n"
    },
    "client.IsMouseCursorEnabled": {
        "prefix": "IsMouseCursorEnabled",
        "body": [
            "IsMouseCursorEnabled()$0"
        ],
        "description": "Check if the player's mouse cursor is enabled.\n"
    },
    "client.SetMouseLocation": {
        "prefix": "SetMouseLocation",
        "body": [
            "SetMouseLocation(${1:mouseX}, ${2:mouseY})$0"
        ],
        "description": "Sets the cursor's position on the screen. Only works within viewport aswell\n"
    },
    "client.GetMouseLocation": {
        "prefix": "GetMouseLocation",
        "body": [
            "GetMouseLocation()$0"
        ],
        "description": "Gets the mouse screen position X and Y.\n"
    },
    "client.GetMouseInputDelta": {
        "prefix": "GetMouseInputDelta",
        "body": [
            "GetMouseInputDelta()$0"
        ],
        "description": "Retrieves how far the mouse moved this frame. \n"
    },
    "client.DeprojectMouseLocationToWorld": {
        "prefix": "DeprojectMouseLocationToWorld",
        "body": [
            "DeprojectMouseLocationToWorld()$0"
        ],
        "description": "Deproject the mouse location to the game world coordinates.\n"
    },
    "client.SetTime": {
        "prefix": "SetTime",
        "body": [
            "SetTime(${1:time})$0"
        ],
        "description": "Set the specified time for the client.\n"
    },
    "client.GetTime": {
        "prefix": "GetTime",
        "body": [
            "GetTime()$0"
        ],
        "description": "Get the client game time.\n"
    },
    "client.SetSkySaturation": {
        "prefix": "SetSkySaturation",
        "body": [
            "SetSkySaturation(${1:saturation})$0"
        ],
        "description": "Set the sky color saturation for the client.\n"
    },
    "client.GetSkySaturation": {
        "prefix": "GetSkySaturation",
        "body": [
            "GetSkySaturation()$0"
        ],
        "description": "Get the sky color saturation for the client.\n"
    },
    "client.SetCloudSpeed": {
        "prefix": "SetCloudSpeed",
        "body": [
            "SetCloudSpeed(${1:speed})$0"
        ],
        "description": "Set the cloud movement speed or the client.\n"
    },
    "client.GetCloudSpeed": {
        "prefix": "GetCloudSpeed",
        "body": [
            "GetCloudSpeed()$0"
        ],
        "description": "Get the cloud movement speed for the client.\n"
    },
    "client.SetCloudDensity": {
        "prefix": "SetCloudDensity",
        "body": [
            "SetCloudDensity(${1:density})$0"
        ],
        "description": "Sets the cloud density for this client.\n"
    },
    "client.GetCloudDensity": {
        "prefix": "GetCloudDensity",
        "body": [
            "GetCloudDensity()$0"
        ],
        "description": "Get the sky cloud density for the client.\n"
    },
    "client.SetSunRadius": {
        "prefix": "SetSunRadius",
        "body": [
            "SetSunRadius(${1:radius})$0"
        ],
        "description": "Set the specified radius of the sun for the client.\n"
    },
    "client.GetSunRadius": {
        "prefix": "GetSunRadius",
        "body": [
            "GetSunRadius()$0"
        ],
        "description": "Get the sun radius for the client.\n"
    },
    "client.SetMoonRadius": {
        "prefix": "SetMoonRadius",
        "body": [
            "SetMoonRadius(${1:radius})$0"
        ],
        "description": "Set the moon radius in float value.\n"
    },
    "client.GetMoonRadius": {
        "prefix": "GetMoonRadius",
        "body": [
            "GetMoonRadius()$0"
        ],
        "description": "Get the moon radius as a float value.\n"
    },
    "client.SetHeightFogDensity": {
        "prefix": "SetHeightFogDensity",
        "body": [
            "SetHeightFogDensity(${1:density})$0"
        ],
        "description": "Set global fog density multiplier.\n"
    },
    "client.GetHeightFogDensity": {
        "prefix": "GetHeightFogDensity",
        "body": [
            "GetHeightFogDensity()$0"
        ],
        "description": "Get the global fog density multiplier.\n"
    },
    "client.GetPing": {
        "prefix": "GetPing",
        "body": [
            "GetPing()$0"
        ],
        "description": "Gets the client ping.\n"
    },
    "client.GetNetworkStats": {
        "prefix": "GetNetworkStats",
        "body": [
            "GetNetworkStats()$0"
        ],
        "description": "Gets the clients' NetworkStats\n"
    },
    "client.GetServerIP": {
        "prefix": "GetServerIP",
        "body": [
            "GetServerIP()$0"
        ],
        "description": "Gets the current server IP address.\n"
    },
    "client.GetServerPort": {
        "prefix": "GetServerPort",
        "body": [
            "GetServerPort()$0"
        ],
        "description": "Gets the current server port.\n"
    },
    "client.GetNPCActor": {
        "prefix": "GetNPCActor",
        "body": [
            "GetNPCActor(${1:npcid})$0"
        ],
        "description": "Get the Unreal Engine actor for the NPC.\n"
    },
    "client.SetNPCPropertyValue": {
        "prefix": "SetNPCPropertyValue",
        "body": [
            "SetNPCPropertyValue(${1:npc}, ${2:PropertyName}, ${3:Value}, ${4:bSync (optional)})$0"
        ],
        "description": "Sets a property value for this entity. Useful to store information for individual entities which can be accessed on client and server and across different packages.\n"
    },
    "client.GetNPCPropertyValue": {
        "prefix": "GetNPCPropertyValue",
        "body": [
            "GetNPCPropertyValue(${1:npc}, ${2:PropertyName})$0"
        ],
        "description": "Gets a property value for this entity.\n"
    },
    "client.GetNPCBoneNames": {
        "prefix": "GetNPCBoneNames",
        "body": [
            "GetNPCBoneNames()$0"
        ],
        "description": "Returns a table containing the bone names of the NPC skeleton dynamically. Useful for GetNPCBoneLocation.\n"
    },
    "client.GetNPCBoneLocation": {
        "prefix": "GetNPCBoneLocation",
        "body": [
            "GetNPCBoneLocation(${1:npc}, ${2:BoneName }, ${3:BoneSpace (optional)})$0"
        ],
        "description": "This function returns the bone location of the NPC.\n"
    },
    "client.GetNPCCount": {
        "prefix": "GetNPCCount",
        "body": [
            "GetNPCCount()$0"
        ],
        "description": "Get the number of spawned NPCs.\n"
    },
    "client.GetStreamedNPC": {
        "prefix": "GetStreamedNPC",
        "body": [
            "GetStreamedNPC()$0"
        ],
        "description": "Get the streamed NPC identifiers in a table.\n"
    },
    "client.GetNPCLocation": {
        "prefix": "GetNPCLocation",
        "body": [
            "GetNPCLocation(${1:npc})$0"
        ],
        "description": "Get the NPC's location vectors.\n"
    },
    "client.GetNPCSkeletalMeshComponent": {
        "prefix": "GetNPCSkeletalMeshComponent",
        "body": [
            "GetNPCSkeletalMeshComponent(${1:npc}, ${2:ComponentName})$0"
        ],
        "description": "Gets the skeletal mesh component of an NPC.\n"
    },
    "client.SetNPCOutline": {
        "prefix": "SetNPCOutline",
        "body": [
            "SetNPCOutline(${1:npc }, ${2:bEnable (optional)})$0"
        ],
        "description": "Sets the outline on the specified NPC.\n"
    },
    "client.GetObjectActor": {
        "prefix": "GetObjectActor",
        "body": [
            "GetObjectActor(${1:object})$0"
        ],
        "description": "Get the Unreal Engine actor for the Object.\n"
    },
    "client.SetObjectPropertyValue": {
        "prefix": "SetObjectPropertyValue",
        "body": [
            "SetObjectPropertyValue()$0"
        ],
        "description": "Sets a property value for this entity. Useful to store information for individual entities which can be accessed on client and server and across different packages.\n"
    },
    "client.GetObjectPropertyValue": {
        "prefix": "GetObjectPropertyValue",
        "body": [
            "GetObjectPropertyValue()$0"
        ],
        "description": "Gets a property value for this entity.\n"
    },
    "client.GetObjectCount": {
        "prefix": "GetObjectCount",
        "body": [
            "GetObjectCount()$0"
        ],
        "description": "Get the number of spawned object instances from CreateObject.\n"
    },
    "client.GetObjectModelCount": {
        "prefix": "GetObjectModelCount",
        "body": [
            "GetObjectModelCount()$0"
        ],
        "description": "Get the amount of object models. This is basically the total number of objects from this page Objects. \n"
    },
    "client.GetObjectModelGroup": {
        "prefix": "GetObjectModelGroup",
        "body": [
            "GetObjectModelGroup(${1:model})$0"
        ],
        "description": "Returns the group name of an object model.\n"
    },
    "client.GetObjectModelName": {
        "prefix": "GetObjectModelName",
        "body": [
            "GetObjectModelName(${1:model})$0"
        ],
        "description": "Returns the asset name of an object model.\n"
    },
    "client.GetStreamedObjects": {
        "prefix": "GetStreamedObjects",
        "body": [
            "GetStreamedObjects(${1:bGetAttached (optional)})$0"
        ],
        "description": "Gets the streamed in objects for the local player.\n"
    },
    "client.GetObjectModel": {
        "prefix": "GetObjectModel",
        "body": [
            "GetObjectModel(${1:object})$0"
        ],
        "description": "Get the object model number ob a spawned object. See Objects.\n"
    },
    "client.GetObjectLocation": {
        "prefix": "GetObjectLocation",
        "body": [
            "GetObjectLocation(${1:object})$0"
        ],
        "description": "Returns the object's XYZ location.\n"
    },
    "client.GetObjectRotation": {
        "prefix": "GetObjectRotation",
        "body": [
            "GetObjectRotation(${1:object})$0"
        ],
        "description": "Gets the object rotation.\n"
    },
    "client.GetObjectScale": {
        "prefix": "GetObjectScale",
        "body": [
            "GetObjectScale(${1:object})$0"
        ],
        "description": "Gets the object scale.\n"
    },
    "client.GetObjectBoundingBox": {
        "prefix": "GetObjectBoundingBox",
        "body": [
            "GetObjectBoundingBox(${1:object})$0"
        ],
        "description": "Gets the local bounds of the object.\n"
    },
    "client.GetObjectSize": {
        "prefix": "GetObjectSize",
        "body": [
            "GetObjectSize(${1:object})$0"
        ],
        "description": "Returns size of the bounding box. (Maximum point - minimum point)\n"
    },
    "client.EnableObjectHitEvents": {
        "prefix": "EnableObjectHitEvents",
        "body": [
            "EnableObjectHitEvents(${1:object}, ${2:bEnable (optional)})$0"
        ],
        "description": "Enables the OnObjectHit event.\n"
    },
    "client.GetObjectMass": {
        "prefix": "GetObjectMass",
        "body": [
            "GetObjectMass(${1:object})$0"
        ],
        "description": "Gets the mass of this object. This is an automatically calculated approximation.\n"
    },
    "client.GetObjectStaticMeshComponent": {
        "prefix": "GetObjectStaticMeshComponent",
        "body": [
            "GetObjectStaticMeshComponent(${1:object})$0"
        ],
        "description": "Gets the static mesh component of an object.\n"
    },
    "client.SetObjectEditorSpeed": {
        "prefix": "SetObjectEditorSpeed",
        "body": [
            "SetObjectEditorSpeed(${1:speed})$0"
        ],
        "description": "Set the object gizmo editor's speed.\n"
    },
    "client.SetObjectEditable": {
        "prefix": "SetObjectEditable",
        "body": [
            "SetObjectEditable(${1:object}, ${2:EditMode})$0"
        ],
        "description": "Enables a gizmo on an object. A gizmo can be used to move, rotate and scale the object with the mouse.\n"
    },
    "client.SetObjectOutline": {
        "prefix": "SetObjectOutline",
        "body": [
            "SetObjectOutline(${1:object}, ${2:bEnable (optional)})$0"
        ],
        "description": "Set an object's outline.\n"
    },
    "client.SetObjectCastShadow": {
        "prefix": "SetObjectCastShadow",
        "body": [
            "SetObjectCastShadow(${1:object}, ${2:bEnable})$0"
        ],
        "description": "Toggles shadow casting for an object.\n"
    },
    "client.SetObjectColor": {
        "prefix": "SetObjectColor",
        "body": [
            "SetObjectColor(${1:object}, ${2:IntColor}, ${3:MaterialSlot (optional)})$0"
        ],
        "description": "This creates a new material with a simple color and assigns it to a material slot.\n"
    },
    "client.SetObjectEmissiveColor": {
        "prefix": "SetObjectEmissiveColor",
        "body": [
            "SetObjectEmissiveColor(${1:object}, ${2:ColorHex}, ${3:EmissiveStrength}, ${4:MaterialSlot (optional)})$0"
        ],
        "description": "Makes an object glow with a specified hexadecimal value, intensity and material slot on the object\n"
    },
    "client.SetObjectTexture": {
        "prefix": "SetObjectTexture",
        "body": [
            "SetObjectTexture(${1:object}, ${2:TextureFile}, ${3:MaterialSlot (optional)})$0"
        ],
        "description": "Sets a texture on an object. For animated ones check SetObjectAnimatedTexture.\n"
    },
    "client.SetObjectAnimatedTexture": {
        "prefix": "SetObjectAnimatedTexture",
        "body": [
            "SetObjectAnimatedTexture(${1:object}, ${2:TextureFile}, ${3:Rows}, ${4:Columns}, ${5:MaterialSlot (optional)})$0"
        ],
        "description": "Sets a flipbook texture on an object.\n"
    },
    "client.AddEvent": {
        "prefix": "AddEvent",
        "body": [
            "AddEvent(${1:EventName}, ${2:LuaFunction })$0"
        ],
        "description": "Adds a function as event handler which will be called when a certain event occurs. Multiple functions can be bound to a single event.\n"
    },
    "client.CallEvent": {
        "prefix": "CallEvent",
        "body": [
            "CallEvent(${1:EventName}, ${2:UserArgs (optional)})$0"
        ],
        "description": "The event to call by name. Will call events in all packages.\n"
    },
    "client.AddRemoteEvent": {
        "prefix": "AddRemoteEvent",
        "body": [
            "AddRemoteEvent(${1:RemoteEventName}, ${2:LuaFunction})$0"
        ],
        "description": "Register a remote event that can then be called from server to client or vice versa using CallRemoteEvent\n"
    },
    "client.CallRemoteEvent": {
        "prefix": "CallRemoteEvent",
        "body": [
            "CallRemoteEvent()$0"
        ],
        "description": "Calls a remote event on the remote machine. The server can call remote events for any connected player. Players (clients) can only call remote events on the server. Events are guaranteed to execute in the order sent. Keep in mind that it takes time to reach the remote machine as it's send over the network.Remote events are independent of packages meaning you can call remote events across different packages.\n"
    },
    "client.GetPickupActor": {
        "prefix": "GetPickupActor",
        "body": [
            "GetPickupActor(${1:pickupid})$0"
        ],
        "description": "Get the Unreal Engine actor for the Pickup.\n"
    },
    "client.GetPickupStaticMeshComponent": {
        "prefix": "GetPickupStaticMeshComponent",
        "body": [
            "GetPickupStaticMeshComponent(${1:pickupId})$0"
        ],
        "description": "Gets the static mesh component of a pickup.\n"
    },
    "client.SetPickupPropertyValue": {
        "prefix": "SetPickupPropertyValue",
        "body": [
            "SetPickupPropertyValue()$0"
        ],
        "description": "Sets a property value for this entity. Useful to store information for individual entities which can be accessed on client and server and across different packages.\n"
    },
    "client.GetPickupPropertyValue": {
        "prefix": "GetPickupPropertyValue",
        "body": [
            "GetPickupPropertyValue()$0"
        ],
        "description": "Gets a property value for this entity.\n"
    },
    "client.GetPickupCount": {
        "prefix": "GetPickupCount",
        "body": [
            "GetPickupCount()$0"
        ],
        "description": "Gets the created pickup count.\n"
    },
    "client.GetStreamedPickups": {
        "prefix": "GetStreamedPickups",
        "body": [
            "GetStreamedPickups()$0"
        ],
        "description": "Get all the streamed pickups for the client.\n"
    },
    "client.GetPickupLocation": {
        "prefix": "GetPickupLocation",
        "body": [
            "GetPickupLocation(${1:pickupid})$0"
        ],
        "description": "Get the specified pickup's XYZ vectors (location).\n"
    },
    "client.GetDoorActor": {
        "prefix": "GetDoorActor",
        "body": [
            "GetDoorActor(${1:doorid})$0"
        ],
        "description": "Get the Unreal Engine actor for the Door.\n"
    },
    "client.IsValidDoor": {
        "prefix": "IsValidDoor",
        "body": [
            "IsValidDoor(${1:door})$0"
        ],
        "description": "Checks whether a given door identifier is a valid door.\n"
    },
    "client.GetDoorCount": {
        "prefix": "GetDoorCount",
        "body": [
            "GetDoorCount()$0"
        ],
        "description": "Returns the number of doors.\n"
    },
    "client.GetNearestDoor": {
        "prefix": "GetNearestDoor",
        "body": [
            "GetNearestDoor(${1:x}, ${2:y}, ${3:z})$0"
        ],
        "description": "Gets the nearest door from the specified XYZ vector created earlier with CreateDoor.\n"
    },
    "client.GetDoorLocation": {
        "prefix": "GetDoorLocation",
        "body": [
            "GetDoorLocation(${1:door})$0"
        ],
        "description": "Gets the XYZA vector of the specified door created earlier with CreateDoor.\n"
    },
    "client.GetStreamedDoors": {
        "prefix": "GetStreamedDoors",
        "body": [
            "GetStreamedDoors()$0"
        ],
        "description": "Get the streamed in doors IDs in a table.\n"
    },
    "client.GetSoundCount": {
        "prefix": "GetSoundCount",
        "body": [
            "GetSoundCount()$0"
        ],
        "description": "Get the amount of sounds created with CreateSound.\n"
    },
    "client.IsValidSound": {
        "prefix": "IsValidSound",
        "body": [
            "IsValidSound(${1:sound})$0"
        ],
        "description": "Checks whether the sound is valid or not.\n"
    },
    "client.CreateSound": {
        "prefix": "CreateSound",
        "body": [
            "CreateSound(${1:SoundFile}, ${2:bLooping (optional)})$0"
        ],
        "description": "Plays a local audio file or over http. Also supports playing .pls network streams.\n"
    },
    "client.CreateSound3D": {
        "prefix": "CreateSound3D",
        "body": [
            "CreateSound3D(${1:SoundFile}, ${2:x}, ${3:y}, ${4:z}, ${5:radius}, ${6:bLooping (optional)})$0"
        ],
        "description": "Plays a local audio file or over http. Also supports playing .pls network streams. Sound is played in 3D world space.\n"
    },
    "client.SetSound3DLocation": {
        "prefix": "SetSound3DLocation",
        "body": [
            "SetSound3DLocation(${1:sound}, ${2:x}, ${3:y}, ${4:z})$0"
        ],
        "description": "Sets the location of a 3d sound.\n"
    },
    "client.GetSound3DLocation": {
        "prefix": "GetSound3DLocation",
        "body": [
            "GetSound3DLocation(${1:sound})$0"
        ],
        "description": "Gets the location of a 3d sound.\n"
    },
    "client.DestroySound": {
        "prefix": "DestroySound",
        "body": [
            "DestroySound(${1:sound})$0"
        ],
        "description": "Destroy the sound created with CreateSound.\n"
    },
    "client.GetAllSounds": {
        "prefix": "GetAllSounds",
        "body": [
            "GetAllSounds()$0"
        ],
        "description": "Gets all the sound IDs in a table.\n"
    },
    "client.SetSoundVolume": {
        "prefix": "SetSoundVolume",
        "body": [
            "SetSoundVolume(${1:sound}, ${2:volume})$0"
        ],
        "description": "Set the specified sound's volume.\n"
    },
    "client.GetSoundVolume": {
        "prefix": "GetSoundVolume",
        "body": [
            "GetSoundVolume(${1:sound})$0"
        ],
        "description": "Get the specified sound's volume.\n"
    },
    "client.SetSoundPitch": {
        "prefix": "SetSoundPitch",
        "body": [
            "SetSoundPitch(${1:sound}, ${2:Pitch})$0"
        ],
        "description": "Sets the sound pitch.\n"
    },
    "client.GetSoundPitch": {
        "prefix": "GetSoundPitch",
        "body": [
            "GetSoundPitch(${1:sound})$0"
        ],
        "description": "Gets the sound pitch.\n"
    },
    "client.SetSoundFadeIn": {
        "prefix": "SetSoundFadeIn",
        "body": [
            "SetSoundFadeIn(${1:sound }, ${2:Duration}, ${3:VolumeLevel}, ${4:StartTime (optional)})$0"
        ],
        "description": "Set the sound to fade in.\n"
    },
    "client.SetSoundFadeOut": {
        "prefix": "SetSoundFadeOut",
        "body": [
            "SetSoundFadeOut(${1:sound}, ${2:Duration}, ${3:VolumeLevel})$0"
        ],
        "description": "Set the sound to fade out.\n"
    },
    "client.SetText3DPropertyValue": {
        "prefix": "SetText3DPropertyValue",
        "body": [
            "SetText3DPropertyValue()$0"
        ],
        "description": "Sets a property value for this entity. Useful to store information for individual entities which can be accessed on client and server and across different packages.\n"
    },
    "client.GetText3DPropertyValue": {
        "prefix": "GetText3DPropertyValue",
        "body": [
            "GetText3DPropertyValue()$0"
        ],
        "description": "Gets a property value for this entity.\n"
    },
    "client.GetText3DCount": {
        "prefix": "GetText3DCount",
        "body": [
            "GetText3DCount()$0"
        ],
        "description": "Returns the number of text 3D created.\n"
    },
    "client.GetStreamedText3D": {
        "prefix": "GetStreamedText3D",
        "body": [
            "GetStreamedText3D()$0"
        ],
        "description": "Get the streamed text 3d identifiers in a table.\n"
    },
    "client.GetText3DLocation": {
        "prefix": "GetText3DLocation",
        "body": [
            "GetText3DLocation(${1:text3d})$0"
        ],
        "description": "Get the text 3d XYZ location.\n"
    },
    "client.Delay": {
        "prefix": "Delay",
        "body": [
            "Delay(${1:Milliseconds}, ${2:LuaFunction}, ${3:UserArgs (optional) (optional)})$0"
        ],
        "description": "Create a delayed function just like a timer but only once. (DelayFor)\n"
    },
    "client.GetTimerCount": {
        "prefix": "GetTimerCount",
        "body": [
            "GetTimerCount()$0"
        ],
        "description": "Gets the created timers count.\n"
    },
    "client.GetAllTimers": {
        "prefix": "GetAllTimers",
        "body": [
            "GetAllTimers()$0"
        ],
        "description": "Get all timers on the server/ client.\n"
    },
    "client.IsValidTimer": {
        "prefix": "IsValidTimer",
        "body": [
            "IsValidTimer(${1:timer})$0"
        ],
        "description": "Check if the timer identifier specified is valid or not.\n"
    },
    "client.CreateTimer": {
        "prefix": "CreateTimer",
        "body": [
            "CreateTimer()$0"
        ],
        "description": "Creates a timer to call a latent function.\nVariations of this function:\n"
    },
    "client.CreateCountTimer": {
        "prefix": "CreateCountTimer",
        "body": [
            "CreateCountTimer(${1:LuaFunction}, ${2:Interval}, ${3:Count}, ${4:UserArgs (optional)})$0"
        ],
        "description": "Creates a countdown timer.\n"
    },
    "client.DestroyTimer": {
        "prefix": "DestroyTimer",
        "body": [
            "DestroyTimer(${1:timer})$0"
        ],
        "description": "Destroys a timer created with CreateTimer or CreateCountTimer.\n"
    },
    "client.PauseTimer": {
        "prefix": "PauseTimer",
        "body": [
            "PauseTimer(${1:timer})$0"
        ],
        "description": "Pauses the specified timer.\n"
    },
    "client.UnpauseTimer": {
        "prefix": "UnpauseTimer",
        "body": [
            "UnpauseTimer(${1:timer})$0"
        ],
        "description": "Unpause an already paused timer with this function.\n"
    },
    "client.GetTimerRemainingTime": {
        "prefix": "GetTimerRemainingTime",
        "body": [
            "GetTimerRemainingTime(${1:timer})$0"
        ],
        "description": "Gets the specified timer's remaining time.\n"
    },
    "client.SetVehiclePropertyValue": {
        "prefix": "SetVehiclePropertyValue",
        "body": [
            "SetVehiclePropertyValue()$0"
        ],
        "description": "Sets a property value for this entity. Useful to store information for individual entities which can be accessed on client and server and across different packages.\n"
    },
    "client.GetVehiclePropertyValue": {
        "prefix": "GetVehiclePropertyValue",
        "body": [
            "GetVehiclePropertyValue()$0"
        ],
        "description": "Gets a property value for this entity.\n"
    },
    "client.GetVehicleCount": {
        "prefix": "GetVehicleCount",
        "body": [
            "GetVehicleCount()$0"
        ],
        "description": "Returns the number of vehicles.\n"
    },
    "client.GetVehicleLicensePlate": {
        "prefix": "GetVehicleLicensePlate",
        "body": [
            "GetVehicleLicensePlate(${1:vehicle})$0"
        ],
        "description": "Gets the vehicle license plate text.\n"
    },
    "client.IsValidVehicle": {
        "prefix": "IsValidVehicle",
        "body": [
            "IsValidVehicle(${1:vehicle})$0"
        ],
        "description": "Checks whether a given vehicle identifier is a valid vehicle.\n"
    },
    "client.GetStreamedVehicles": {
        "prefix": "GetStreamedVehicles",
        "body": [
            "GetStreamedVehicles()$0"
        ],
        "description": "Get the streamed-in vehicles identifiers in a table.\n"
    },
    "client.GetVehicleBoneLocation": {
        "prefix": "GetVehicleBoneLocation",
        "body": [
            "GetVehicleBoneLocation(${1:vehicle}, ${2:BoneName}, ${3:BoneSpace (optional)})$0"
        ],
        "description": "Returns the location of a vehicle bone/socket. For a list of bones see VehicleBones.\n"
    },
    "client.GetVehicleBoneNames": {
        "prefix": "GetVehicleBoneNames",
        "body": [
            "GetVehicleBoneNames()$0"
        ],
        "description": "Gets a list of the vehicles bone names.\n"
    },
    "client.GetVehicleModel": {
        "prefix": "GetVehicleModel",
        "body": [
            "GetVehicleModel(${1:vehicle})$0"
        ],
        "description": "Get the vehicle model id.\n"
    },
    "client.GetVehicleLocation": {
        "prefix": "GetVehicleLocation",
        "body": [
            "GetVehicleLocation(${1:vehicle})$0"
        ],
        "description": "Get the vehicle's location.\n"
    },
    "client.GetVehicleRotation": {
        "prefix": "GetVehicleRotation",
        "body": [
            "GetVehicleRotation(${1:vehicle})$0"
        ],
        "description": "Returns the vehicle rotation (pitch, yaw and roll) of the specified vehicle.\n"
    },
    "client.GetVehicleVelocity": {
        "prefix": "GetVehicleVelocity",
        "body": [
            "GetVehicleVelocity(${1:vehicle})$0"
        ],
        "description": "Returns the vehicle's velocity vectors.\n"
    },
    "client.GetVehicleForwardVector": {
        "prefix": "GetVehicleForwardVector",
        "body": [
            "GetVehicleForwardVector(${1:vehicle})$0"
        ],
        "description": "Gets the normalized forward vector.\n"
    },
    "client.GetVehicleRightVector": {
        "prefix": "GetVehicleRightVector",
        "body": [
            "GetVehicleRightVector(${1:vehicle})$0"
        ],
        "description": "Gets the normalized right vector.\n"
    },
    "client.GetVehicleUpVector": {
        "prefix": "GetVehicleUpVector",
        "body": [
            "GetVehicleUpVector(${1:vehicle})$0"
        ],
        "description": "Gets the normalized up vector.\n"
    },
    "client.GetVehicleBoundingBox": {
        "prefix": "GetVehicleBoundingBox",
        "body": [
            "GetVehicleBoundingBox(${1:vehicle})$0"
        ],
        "description": "Gets the local bounds of the vehicle.\n"
    },
    "client.GetVehicleEngineRPM": {
        "prefix": "GetVehicleEngineRPM",
        "body": [
            "GetVehicleEngineRPM(${1:vehicle})$0"
        ],
        "description": "Get the vehicle's engine revolution per minute (RPM).\n"
    },
    "client.GetVehicleForwardSpeed": {
        "prefix": "GetVehicleForwardSpeed",
        "body": [
            "GetVehicleForwardSpeed(${1:vehicle})$0"
        ],
        "description": "Returns the vehicle's forward moving speed. Negative when the vehicle is moving backwards.\n"
    },
    "client.GetVehicleGear": {
        "prefix": "GetVehicleGear",
        "body": [
            "GetVehicleGear(${1:vehicle})$0"
        ],
        "description": "Get the vehicle's gear.\n"
    },
    "client.GetVehicleWheelSurface": {
        "prefix": "GetVehicleWheelSurface",
        "body": [
            "GetVehicleWheelSurface(${1:vehicle}, ${2:wheel})$0"
        ],
        "description": "Get the wheel surface name.\n"
    },
    "client.IsVehicleWheelInAir": {
        "prefix": "IsVehicleWheelInAir",
        "body": [
            "IsVehicleWheelInAir(${1:vehicle}, ${2:wheel})$0"
        ],
        "description": "Check if the specified vehicle wheel is in air or not.\n"
    },
    "client.IsVehicleInAir": {
        "prefix": "IsVehicleInAir",
        "body": [
            "IsVehicleInAir(${1:vehicle})$0"
        ],
        "description": "Check if vehicle is in air.\n"
    },
    "client.GetVehicleWheelSteerAngle": {
        "prefix": "GetVehicleWheelSteerAngle",
        "body": [
            "GetVehicleWheelSteerAngle(${1:vehicle}, ${2:wheel})$0"
        ],
        "description": "Returns the steering angle from 0.0 to ~45.0 (depending on vehicle)\n"
    },
    "client.IsVehicleHornActive": {
        "prefix": "IsVehicleHornActive",
        "body": [
            "IsVehicleHornActive(${1:vehicle})$0"
        ],
        "description": "Check if the vehicle horn is active or not.\n"
    },
    "client.GetVehicleEngineState": {
        "prefix": "GetVehicleEngineState",
        "body": [
            "GetVehicleEngineState(${1:vehicle})$0"
        ],
        "description": "Get the vehicle's engine state.\n"
    },
    "client.GetVehicleLightState": {
        "prefix": "GetVehicleLightState",
        "body": [
            "GetVehicleLightState(${1:vehicle})$0"
        ],
        "description": "Get the vehicle's light state.\n"
    },
    "client.GetVehicleHoodRatio": {
        "prefix": "GetVehicleHoodRatio",
        "body": [
            "GetVehicleHoodRatio(${1:vehicle})$0"
        ],
        "description": "Get the vehicle's hood ratio.\n"
    },
    "client.GetVehicleTrunkRatio": {
        "prefix": "GetVehicleTrunkRatio",
        "body": [
            "GetVehicleTrunkRatio(${1:vehicle})$0"
        ],
        "description": "Get the vehicle's trunk ratio.\n"
    },
    "client.IsVehicleInWater": {
        "prefix": "IsVehicleInWater",
        "body": [
            "IsVehicleInWater(${1:vehicle})$0"
        ],
        "description": "Check if the vehicle is in water.\n"
    },
    "client.IsVehicleSeatOccupied": {
        "prefix": "IsVehicleSeatOccupied",
        "body": [
            "IsVehicleSeatOccupied(${1:vehicle}, ${2:seat})$0"
        ],
        "description": "Check if the specified seat of the vehicle is occupied or not.\n"
    },
    "client.GetVehicleDoorLocation": {
        "prefix": "GetVehicleDoorLocation",
        "body": [
            "GetVehicleDoorLocation(${1:vehicle}, ${2:door})$0"
        ],
        "description": "Get the specified door enter location of the vehicle. This is where the player has to stand in order to enter the vehicle.\n"
    },
    "client.GetVehicleHealth": {
        "prefix": "GetVehicleHealth",
        "body": [
            "GetVehicleHealth(${1:vehicle})$0"
        ],
        "description": "Returns the specified vehicle health in float.\n"
    },
    "client.GetVehicleSkeletalMeshComponent": {
        "prefix": "GetVehicleSkeletalMeshComponent",
        "body": [
            "GetVehicleSkeletalMeshComponent(${1:vehicle})$0"
        ],
        "description": "Gets the skeletal mesh component of a vehicle.\n"
    },
    "client.GetWebUICount": {
        "prefix": "GetWebUICount",
        "body": [
            "GetWebUICount()$0"
        ],
        "description": "Gets the total number of Web UIs created.\n"
    },
    "client.CreateWebUI": {
        "prefix": "CreateWebUI",
        "body": [
            "CreateWebUI(${1:x}, ${2:y}, ${3:width}, ${4:height }, ${5:zOrder (optional)}, ${6:frameRate (optional)})$0"
        ],
        "description": "Creates a new WebUI\n"
    },
    "client.CreateWebUI3D": {
        "prefix": "CreateWebUI3D",
        "body": [
            "CreateWebUI3D(${1:x}, ${2:y}, ${3:z}, ${4:rx}, ${5:ry}, ${6:rz}, ${7:width}, ${8:height }, ${9:frameRate (optional)})$0"
        ],
        "description": "Creates a new WebUI in 3d space. Use DestroyWebUI to destroy it.\n"
    },
    "client.DestroyWebUI": {
        "prefix": "DestroyWebUI",
        "body": [
            "DestroyWebUI(${1:web})$0"
        ],
        "description": "Destroy a web UI made with CreateWebUI.\n"
    },
    "client.GetAllWebUI": {
        "prefix": "GetAllWebUI",
        "body": [
            "GetAllWebUI()$0"
        ],
        "description": "Get all web UI created for the client. Useful for loops.\n"
    },
    "client.SetWebVisibility": {
        "prefix": "SetWebVisibility",
        "body": [
            "SetWebVisibility(${1:web}, ${2:visibility})$0"
        ],
        "description": "Used to set the web UI visibility mode.\n"
    },
    "client.GetWebVisibility": {
        "prefix": "GetWebVisibility",
        "body": [
            "GetWebVisibility(${1:web})$0"
        ],
        "description": "Get the specified web's visibility mode.\n"
    },
    "client.SetWebURL": {
        "prefix": "SetWebURL",
        "body": [
            "SetWebURL(${1:web}, ${2:URL})$0"
        ],
        "description": "Set the web URL. Not all URLs are whitelisted and might not work.\n"
    },
    "client.ExecuteWebJS": {
        "prefix": "ExecuteWebJS",
        "body": [
            "ExecuteWebJS(${1:web}, ${2:Javascript})$0"
        ],
        "description": "Executes Javascript in the WebUI. (Make sure to first call this after all your js is loaded by sending an event from js.)\n"
    },
    "client.SetWebLocation": {
        "prefix": "SetWebLocation",
        "body": [
            "SetWebLocation(${1:web}, ${2:x}, ${3:y }, ${4:z (optional)})$0"
        ],
        "description": "Set the location for the specified web.\n"
    },
    "client.SetWebRotation": {
        "prefix": "SetWebRotation",
        "body": [
            "SetWebRotation(${1:web}, ${2:rx}, ${3:ry}, ${4:rz})$0"
        ],
        "description": "Set the rotation for the specified web.\n"
    },
    "client.SetWebSize": {
        "prefix": "SetWebSize",
        "body": [
            "SetWebSize(${1:web}, ${2:width}, ${3:height})$0"
        ],
        "description": "Set the web UI size.\n"
    },
    "client.SetWebAlignment": {
        "prefix": "SetWebAlignment",
        "body": [
            "SetWebAlignment(${1:web}, ${2:x}, ${3:y})$0"
        ],
        "description": "Set the web alignment.\n"
    },
    "client.SetWebAnchors": {
        "prefix": "SetWebAnchors",
        "body": [
            "SetWebAnchors(${1:web}, ${2:MinX}, ${3:MinY}, ${4:MaxX}, ${5:MaxY})$0"
        ],
        "description": "Set the anchor points for the Web UI.\n"
    },
    "client.SetWebFocus": {
        "prefix": "SetWebFocus",
        "body": [
            "SetWebFocus(${1:web})$0"
        ],
        "description": "Sets (keyboard) focus to a WebUI. Useful for custom chats.\n"
    },
    "client.SetInputMode": {
        "prefix": "SetInputMode",
        "body": [
            "SetInputMode()$0"
        ],
        "description": "Set the client's input mode for the game.\n"
    },
    "client.GetInputMode": {
        "prefix": "GetInputMode",
        "body": [
            "GetInputMode()$0"
        ],
        "description": "Gets the input mode that was previously set with SetInputMode.\n"
    },
    "client.IsInputKeyDown": {
        "prefix": "IsInputKeyDown",
        "body": [
            "IsInputKeyDown(${1:key})$0"
        ],
        "description": "Check if a key is currently pressed.\n"
    },
    "client.IsCtrlPressed": {
        "prefix": "IsCtrlPressed",
        "body": [
            "IsCtrlPressed()$0"
        ],
        "description": "Check if the player has pressed the Ctrl key.\n"
    },
    "client.IsShiftPressed": {
        "prefix": "IsShiftPressed",
        "body": [
            "IsShiftPressed()$0"
        ],
        "description": "Check if the client has pressed the Shift key\n"
    },
    "client.IsAltPressed": {
        "prefix": "IsAltPressed",
        "body": [
            "IsAltPressed()$0"
        ],
        "description": "Check if the client has pressed the Alt key\n"
    },
    "client.IsCmdPressed": {
        "prefix": "IsCmdPressed",
        "body": [
            "IsCmdPressed()$0"
        ],
        "description": "Check if the client has pressed the Ctrl key\n"
    },
    "client.SetIgnoreMoveInput": {
        "prefix": "SetIgnoreMoveInput",
        "body": [
            "SetIgnoreMoveInput(${1:bIgnore})$0"
        ],
        "description": "This function ignores the player input, basically freezing.\n"
    },
    "client.SetIgnoreLookInput": {
        "prefix": "SetIgnoreLookInput",
        "body": [
            "SetIgnoreLookInput(${1:bIgnore})$0"
        ],
        "description": "This function toggles the player's mouse input that controls the camera.\n"
    },
    "client.SetControlRotation": {
        "prefix": "SetControlRotation",
        "body": [
            "SetControlRotation(${1:pitch}, ${2:yaw}, ${3:roll})$0"
        ],
        "description": "Sets the client control rotation.\n"
    },
    "client.GetInputAxisValue": {
        "prefix": "GetInputAxisValue",
        "body": [
            "GetInputAxisValue(${1:AxisName})$0"
        ],
        "description": "Gets the value of input axis keys.\n"
    }
}